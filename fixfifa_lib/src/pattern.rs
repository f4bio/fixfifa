use winapi::shared::minwindef::BYTE;

pub const EVENT: [BYTE; 24] = [
    0x48, 0x8B, 0xD0, // mov rdx, rax
    0x48, 0x8D, 0x44, 0x24, 0x50, // lea rax, ss:[rsp+0x50]
    0x48, 0x89, 0x44, 0x24, 0x20, // mov qword ptr ss:[rsp+0x20], rax
    0x4C, 0x8D, 0x4C, 0x24, 0x60, // lea r9, ss:[rsp+0x60]
    0x48, 0x8B, 0xCB, // mov rcx, rbx
    0xFF, 0x17, // call qword ptr ds:[rdi]
    0x90, // nop
];

pub const PUSH: [BYTE; 24] = [
    0x50, // push rax
    0x53, // push rbx
    0x51, // push rcx
    0x52, // push rdx
    0x55, // push rbp
    0x54, // push rsp
    0x56, // push rsi
    0x57, // push rdi
    0x41, 0x50, // push r8
    0x41, 0x51, // push r9
    0x41, 0x52, // push r10
    0x41, 0x53, // push r11
    0x41, 0x54, // push r12
    0x41, 0x55, // push r13
    0x41, 0x56, // push r14
    0x41, 0x57, // push r15
];

pub const PREPARE_CALL: [BYTE; 8] = [
    0x4C, 0x89, 0xC1, // mov rcx, r8
    0x4C, 0x89, 0xCA, // mov rdx, r9
    0x48, 0xBF, // mov rdi, ...
];

pub const CALL: [BYTE; 2] = [
    0xFF, 0xD7, // call rdi
];

pub const POP: [BYTE; 24] = [
    0x41, 0x5F, // pop r15
    0x41, 0x5E, // pop r14
    0x41, 0x5D, // pop r13
    0x41, 0x5C, // pop r12
    0x41, 0x5B, // pop r11
    0x41, 0x5A, // pop r10
    0x41, 0x59, // pop r9
    0x41, 0x58, // pop r8
    0x5F, // pop rdi
    0x5E, // pop rsi
    0x5C, // pop rsp
    0x5D, // pop rbp
    0x5A, // pop rdx
    0x59, // pop rcx
    0x5B, // pop rbx
    0x58, // pop rax
];

pub const ORIGINAL: [BYTE; 5] = [
    0x48, 0x8B, 0xCB, // mov rcx, rbx
    0xFF, 0x17, // call qword ptr ds:[rdi]
];

pub const PATTERN_T: usize = 24;
pub const PUSH_T: usize = 24;
pub const PREPARE_CALL_T: usize = 8;
pub const BRIDGE_T: usize = 8;
pub const CALL_T: usize = 2;
pub const POP_T: usize = 24;
pub const ORIGINAL_T: usize = 5;

pub const OFFSET_T: usize = 18;
pub const SHORT_JMP_REL_T: usize = 5;

pub const ALT_TAB: [BYTE; 54] = [
    // mov rax, qword ptr ds:[rdi+0x97C0]
    0x48, 0x8B, 0x87, 0xC0, 0x97, 0x00, 0x00, // mov rcx, qword ptr ds:[rax+0x1288]
    0x48, 0x8B, 0x88, 0x88, 0x12, 0x00, 0x00, // cmp dword ptr ds:[rcx+0xF00], 0x0
    0x83, 0xB9, 0x00, 0x0F, 0x00, 0x00, 0x00, // je 0x00000001439ACD22
    0x0F, 0x84, 0x5D, 0xF4, 0xFF, 0xFF, // mov r8d, 0x1
    0x41, 0xB8, 0x01, 0x00, 0x00, 0x00, // lea rdx, ds:[0x0000000145370370]
    0x48, 0x8D, 0x15, 0x9E, 0x2A, 0x9C, 0x01, // call 0x000000014147E100
    0xE8, 0x29, 0x08, 0xAD, 0xFD, // cmp eax, 0x1
    0x83, 0xF8, 0x01, // jne 0x00000001439ACD22
    0x0F, 0x85, 0x42, 0xF4, 0xFF, 0xFF,
];

pub const ALT_TAB_T: usize = 54;

// TODO: chaqnge to char array or str
pub const ALT_TAB_MASK: [BYTE; ALT_TAB_T] = [
    // 0x2D --> match required
    // 0x78 --> ignore
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x78, 0x78, 0x78, 0x78, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
    0x2D, 0x2D, 0x2D, 0x2D, 0x78, 0x78, 0x78, 0x78, 0x2D, 0x78, 0x78, 0x78, 0x78, 0x2D, 0x2D, 0x2D,
    0x2D, 0x2D, 0x78, 0x78, 0x78, 0x78,
];

pub const SHORT_JMP_EQ_REL_OP_T: usize = 2;
pub const SHORT_JMP_EQ_REL_TARGET_T: usize = 4;
pub const SHORT_JMP_EQ_REL_T: usize = SHORT_JMP_EQ_REL_OP_T + SHORT_JMP_EQ_REL_TARGET_T;

pub const LEAVE: [BYTE; 52] = [
    0x48, 0x83, 0xEC, 0x38, //
    0x48, 0x8D, 0x05, 0xDD, 0xC3, 0xE7, 0xF6, //
    0x48, 0x89, 0x44, 0x24, 0x28, //
    0x4C, 0x8D, 0x0D, 0x91, 0x9A, 0xEC, 0xF6, //
    0x48, 0x8D, 0x05, 0xFA, 0xE5, 0xEA, 0xF6, //
    0x4C, 0x8D, 0x05, 0xAB, 0xC0, 0x60, 0xF3, //
    0x48, 0x89, 0x44, 0x24, 0x20, //
    0xE8, 0x81, 0x18, 0xAD, 0xF3, //
    0x48, 0x83, 0xC4, 0x38, //
    0xC3, //
];
pub const LEAVE_T: usize = 52;

pub const LEAVE_MASK: [BYTE; LEAVE_T] = [
    // 0x2D --> match required
    // 0x78 --> ignore
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x78, 0x78, 0x78, 0x78, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
    0x2D, 0x2D, 0x2D, 0x78, 0x78, 0x78, 0x78, 0x2D, 0x2D, 0x2D, 0x78, 0x78, 0x78, 0x78, 0x2D, 0x2D,
    0x2D, 0x78, 0x78, 0x78, 0x78, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x78, 0x78, 0x78, 0x78, 0x2D,
    0x2D, 0x2D, 0x2D, 0x2D,
];

pub const LEAVE_TYPE_OFFSET: usize = 23;
pub const LEA_QWORD_PTR_DS_OP_T: usize = 3;
pub const LEA_QWORD_PTR_DS_CONSTANT_T: usize = 4;
pub const LEA_QWORD_PTR_DS_T: usize = LEA_QWORD_PTR_DS_OP_T + LEA_QWORD_PTR_DS_CONSTANT_T;
